{"version":3,"sources":["components/static/dev3.svg","components/Dashboard.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","className","style","marginTop","paddingLeft","Button","variant","src","illustration","alt","NavBar","Navbar","collapseOnSelect","expand","fixed","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","transition","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,+MC8B5BC,G,MAxBG,WAChB,OACE,6BAASC,UAAU,aACjB,yBAAKA,UAAU,gBACb,yBAAKC,MAAO,CAAEC,UAAW,MAAOC,YAAa,QAC3C,sCACS,6BACP,gDAEF,iJAEsD,6BAFtD,6DAKA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,mBAGJ,yBAAKL,UAAU,gBACb,yBAAKM,IAAKC,IAAcC,IAAI,wB,gBCIrBC,G,MAvBA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,MAAM,OACzC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,oBACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,0BAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKpB,UAAU,YACf,kBAACoB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUN,KAAK,IAAId,MAAO,CAAEqB,WAAY,SAAxC,YAGA,kBAACF,EAAA,EAAIC,KAAL,CAAUN,KAAK,IAAId,MAAO,CAAEqB,WAAY,SAAxC,UAGA,kBAACF,EAAA,EAAIC,KAAL,CAAUN,KAAK,IAAId,MAAO,CAAEqB,WAAY,SAAxC,gBCJKC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.51080b33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dev3.f7f12d8b.svg\";","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport illustration from \"./static/dev3.svg\";\r\nimport \"./Dashboard.css\";\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <section className=\"dashboard\">\r\n      <div className=\"calltoaction\">\r\n        <div style={{ marginTop: \"30%\", paddingLeft: \"10%\" }}>\r\n          <h1>\r\n            Hello! <br></br>\r\n            <span>I'm Yashdeep.</span>\r\n          </h1>\r\n          <p>\r\n            Final year MCA student at Bhai Parmanand Institute of Business\r\n            Studies, Guru Gobind Singh Indraprastha University. <br></br>I'm\r\n            passionate about software and full stack development.\r\n          </p>\r\n          <Button variant=\"primary\">Get In Touch!</Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"illustration\">\r\n        <img src={illustration} alt=\"guy_with_laptop\" />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\r\n\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"lg\" fixed=\"top\">\r\n      <Navbar.Brand href=\"/\">Yashdeep Bachhas</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\"></Nav>\r\n        <Nav>\r\n          <Nav.Link href=\"/\" style={{ transition: \"0.3s\" }}>\r\n            Projects\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/\" style={{ transition: \"0.3s\" }}>\r\n            Resume\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/\" style={{ transition: \"0.3s\" }}>\r\n            Contact\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}